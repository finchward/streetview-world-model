import asyncio
import aiohttp
import torch
import base64
import io
from PIL import Image
from torchvision import transforms
import json
import numpy as np

class Simulator:
    """
    Colab-safe Simulator that fetches data from local server via ngrok.
    Drop-in replacement for the original Simulator class.
    """
    
    def __init__(self, server_url=None):
        """
        Args:
            server_url: The ngrok URL of your local server (e.g., "https://abc123.ngrok.io")
        """
        self.server_url = server_url
        self.session = None
        self._is_setup = False
        
    async def setup(self):
        """Initialize the HTTP session and verify server connection"""
        if not self.server_url:
            raise ValueError(
                "‚ùå No server_url provided. Please provide your ngrok URL:\n"
                "simulator = ColabSimulator('https://your-ngrok-url.ngrok.io')"
            )
        
        # Create persistent HTTP session
        self.session = aiohttp.ClientSession(
            timeout=aiohttp.ClientTimeout(total=300),  # 5 minutes timeout
            connector=aiohttp.TCPConnector(limit=100)
        )
        
        try:
            # Test connection to server
            async with self.session.get(f"{self.server_url}/status") as response:
                if response.status != 200:
                    raise Exception(f"Server returned status {response.status}")
                
                status = await response.json()
                if not status.get("simulator_ready", False):
                    raise Exception("Server simulator not ready")
                
                print(f"‚úÖ Connected to server: {self.server_url}")
                print(f"üìä Server has {status.get('tabs', 0)} tabs ready")
                
        except Exception as e:
            await self.session.close()
            raise Exception(f"‚ùå Failed to connect to server: {e}")
        
        self._is_setup = True
        
    async def close(self):
        """Close the HTTP session"""
        if self.session:
            await self.session.close()
            print("üõë ColabSimulator closed")
    
    async def get_images(self):
        """
        Fetch screenshots from server and return as PyTorch tensor.
        Returns: torch.Tensor with shape [page_num, 3, h, w]
        """
        if not self._is_setup:
            raise RuntimeError("Call setup() first")
        
        try:
            async with self.session.get(f"{self.server_url}/screenshots") as response:
                if response.status != 200:
                    raise Exception(f"Server returned status {response.status}")
                
                data = await response.json()
                images_b64 = data["images"]
                original_shape = data["shape"]
                
                # Convert base64 images back to tensors
                tensors = []
                for img_b64 in images_b64:
                    # Decode base64 to PIL Image
                    img_data = base64.b64decode(img_b64)
                    pil_img = Image.open(io.BytesIO(img_data)).convert('RGB')
                    
                    # Convert to tensor (matching original transform)
                    transform = transforms.Compose([
                        transforms.ToTensor(),  # Converts to [0,1] and CHW format
                    ])
                    tensor = transform(pil_img)
                    tensors.append(tensor)
                
                # Stack into batch tensor
                images_tensor = torch.stack(tensors)  # [page_num, 3, h, w]
                
                print(f"üì∏ Fetched {len(images_b64)} screenshots, shape: {images_tensor.shape}")
                return images_tensor
                
        except Exception as e:
            raise Exception(f"Failed to fetch images: {e}")
    
    async def move(self):
        """
        Send movement command to server and return movement tensor.
        Returns: torch.Tensor with shape [page_num, 6]
        """
        if not self._is_setup:
            raise RuntimeError("Call setup() first")
        
        try:
            async with self.session.post(f"{self.server_url}/move") as response:
                if response.status != 200:
                    raise Exception(f"Server returned status {response.status}")
                
                data = await response.json()
                movements = data["movements"]
                shape = data["shape"]
                
                # Convert back to tensor
                movement_tensor = torch.tensor(movements, dtype=torch.float32)
                
                print(f"üéÆ Executed movements, shape: {movement_tensor.shape}")
                return movement_tensor
                
        except Exception as e:
            raise Exception(f"Failed to move: {e}")


# Example usage for Colab:
"""
# In your Colab notebook:

# 1. Install requirements
!pip install aiohttp pillow torchvision

# 2. Upload this file to Colab or copy the code

# 3. Use your simulator
import asyncio
from colab_simulator import ColabSimulator

async def main():
    # Replace with your ngrok URL from the local server
    simulator = ColabSimulator("https://abc123.ngrok.io")
    
    await simulator.setup()
    
    # Your training loop
    for epoch in range(num_epochs):
        images = await simulator.get_images()  # [batch, 3, h, w]
        movements = await simulator.move()     # [batch, 6]
        
        # Your model training code here...
        # loss = model(images, movements)
        # loss.backward()
        # optimizer.step()
    
    await simulator.close()

# Run in Colab
await main()
"""